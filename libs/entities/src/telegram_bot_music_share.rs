//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "telegram_bot_music_share")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub music_link_id: Uuid,
    pub created_at: DateTimeUtc,
    pub telegram_message_id: i64,
    pub telegram_bot_user_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::music_link::Entity",
        from = "Column::MusicLinkId",
        to = "super::music_link::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    MusicLink,
    #[sea_orm(
        belongs_to = "super::telegram_bot_user::Entity",
        from = "Column::TelegramBotUserId",
        to = "super::telegram_bot_user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TelegramBotUser,
}

impl Related<super::music_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MusicLink.def()
    }
}

impl Related<super::telegram_bot_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TelegramBotUser.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
