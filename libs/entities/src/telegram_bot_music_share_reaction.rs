//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "telegram_bot_music_share_reaction")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub reaction_text: String,
    pub created_at: DateTimeUtc,
    pub telegram_bot_user_id: Uuid,
    pub telegram_message_id: Option<i64>,
    pub telegram_bot_music_share_id: Uuid,
    pub llm_sentiment_analysis: Option<String>,
    pub llm_sentiment_analysis_completed_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::telegram_bot_user::Entity",
        from = "Column::TelegramBotUserId",
        to = "super::telegram_bot_user::Column::Id"
    )]
    TelegramBotUser,
    #[sea_orm(
        belongs_to = "super::telegram_bot_music_share::Entity",
        from = "Column::TelegramBotMusicShareId",
        to = "super::telegram_bot_music_share::Column::Id"
    )]
    TelegramBotMusicShare,
}

impl Related<super::telegram_bot_music_share::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TelegramBotMusicShare.def()
    }
}

impl Related<super::telegram_bot_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TelegramBotUser.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
